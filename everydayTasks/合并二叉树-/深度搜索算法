1.题目：
给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。

你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为 NULL 的节点将直接作为新二叉树的节点。

示例 1:

输入: 
	Tree 1                     Tree 2                  
          1                         2                             
         / \                       / \                            
        3   2                     1   3                        
       /                           \   \                      
      5                             4   7                  
输出: 
合并后的树:
	     3
	    / \
	   4   5
	  / \   \ 
	 5   4   7

注意: 合并必须从两个树的根节点开始。

2.思路：
新建一个结点，用于存储两个合并的结点，并使用递归不断访问左右结点
可以先从新建一个结点merge开始，自身结点值相加，再用递归算左右，最后返回结点
注意点：
新建结点时，带上"struct",并且struct TreeNode*放在最前面，而不是malloc前面
3.题解:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


struct TreeNode* mergeTrees(struct TreeNode* t1, struct TreeNode* t2){
    if(t1==NULL) return t2;
    if(t2==NULL) return t1;
    struct TreeNode*merge=malloc(sizeof(struct TreeNode));
    merge->val=t1->val+t2->val;
    merge->left=mergeTrees(t1->left,t2->left);
    merge->right=mergeTrees(t1->right,t2->right);
    return merge;
}
