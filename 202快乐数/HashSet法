2020/4/5
题目：
编写一个算法来判断一个数是不是“快乐数”。

一个“快乐数”定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数。

示例: 

输入: 19
输出: true
解释: 
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1

思路：
1.建立一个HashSet表，当Set表中不包含n以及n！=1时，循环调用方法得到下一个数
2.当n==1，表明是快乐数；当n不等于1且set表里包含n，表明一直在循环，则n不会等于1；

class Solution {
    private int getNext(int n){
        int totalSum=0;
        while(n>0){
            int d=n%10;
            n=n/10;
            totalSum+=d*d;
        }
        return totalSum;
    }
    public boolean isHappy(int n) {
        Set<Integer> seen=new HashSet<>();
        while(n!=1&&!seen.contains(n)){
            seen.add(n);
            n=getNext(n);
        }
        return n==1;
    }
}
