22. 黑白方格画

题目：

小扣注意到秋日市集上有一个创作黑白方格画的摊位。摊主给每个顾客提供一个固定在墙上的白色画板，画板不能转动。画板上有 n * n 的网格。绘画规则为，小扣可以选择任意多行以及任意多列的格子涂成黑色，所选行数、列数均可为 0。

小扣希望最终的成品上需要有 k 个黑色格子，请返回小扣共有多少种涂色方案。

注意：两个方案中任意一个相同位置的格子颜色不同，就视为不同的方案。

示例 1：

    输入：n = 2, k = 2
    
    输出：4
    
    解释：一共有四种不同的方案：
    第一种方案：涂第一列；
    第二种方案：涂第二列；
    第三种方案：涂第一行；
    第四种方案：涂第二行。

示例 2：

    输入：n = 2, k = 1
    
    输出：0
    
    解释：不可行，因为第一次涂色至少会涂两个黑格。

示例 3：

    输入：n = 2, k = 4
    
    输出：1
    
    解释：共有 2*2=4 个格子，仅有一种涂色方案。



解题思路：

假设涂了M行N列，则涂了M*n格，N\*n格，有M\*N格是重复了

若删去重复的格后等于要涂的格，则是一种方案，进行行列的全排列C

并且每种i（行）和j（列）都要遍历到



注意:

1.c(i,n)与c(j,n)之间是*而不是+

2.加强代码的健壮性，要包括k=0且k=n*n，0或满



过程:

（java）

class Solution {
    public int paintingPlan(int n, int k) {
        int res = 0;
        //边界问题
        if(k == 0)return 1;
        if(k == n * n)return 1;
    //第一层循环表示涂 i 行 第二层循环表示涂 j 列
    for(int i = 0;i < n;i++){
        for(int j = 0;j < n;j++)
     //当你涂了 i 行 j 列  则有 i * n + j * n个方格被涂过了
            //去掉重复计入的 i*j个方格 是否等于结果k
            if((i*n) + (j*n) - (i*j) == k) {
                res += C(i,n) * C(j,n);
            }
    }
    return res;
}

//数学里的排列组合 C(愚蠢式写法，勿计较)
public int C(int x,int y){
    if(x == 0)return 1;
    int n = 1;
    for(int i = 0;i < x;i++){
        n *= (y - i);
    }
    for(int i = 1;i <= x;i++){
        n /= i;
    }
    return n;
}
}
