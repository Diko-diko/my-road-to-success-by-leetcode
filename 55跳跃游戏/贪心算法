2020/3/25
题目：
给定一个非负整数数组，你最初位于数组的第一个位置。

数组中的每个元素代表你在该位置可以跳跃的最大长度。

判断你是否能够到达最后一个位置。

示例 1:

输入: [2,3,1,1,4]
输出: true
解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。

示例 2:

输入: [3,2,1,0,4]
输出: false
解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。

思路：
1.从一个数到该数能到达的最大的数之间，若有可以到达比现有最大的数还大的数，取更大的数，也就是贪心算法
2.要排除一些特殊情况

class Solution {
    public boolean canJump(int[] nums) {
        int len=nums.length;
        if(len==0||len==1) return true;
        boolean []s=new boolean[len];
        Arrays.fill(s,false);
        int m=0;
        int res=0;
        s[0]=true;
        for(int i=0;i<len-1;i++){
            m=nums[i];
            if(i==0){//i=0的情况
                if(m>0){
                     if(m>=len-1){//如：[3,0]
                    return true;
                    }
                    else{//不是极端情况，继续遍历
                      s[m]=true;
                      res=m;
                      continue;
                    }
                }
                else{
                    return false;
                }
               
            }
           else if(((i-1)>=0)&&(m+i)>(nums[i-1]+i-1)){//i!=0且该数比上一个可以到达更远的情况
                if((m+i)>=len-1) {
                    return true;
                }
                else{
                    s[i+m]=true;
                    res=i+m;
                }
            }
            else if(i==res&&nums[res]==0) {//如：[2,5,0,0],[1,0,3]
            if(nums[res+m]>=len-1){
                    return true;
                }
                else
                    return false;
            }
            else continue;
        }
        return s[len-1];
    }
}
/*************************************3.25第一版，没通过**********************************/
