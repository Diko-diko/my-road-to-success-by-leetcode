2020/4/12
题目:
给定两个字符串 s 和 t，判断它们是否是同构的。

如果 s 中的字符可以被替换得到 t ，那么这两个字符串是同构的。

所有出现的字符都必须用另一个字符替换，同时保留字符的顺序。两个字符不能映射到同一个字符上，但字符可以映射自己本身。

示例 1:

输入: s = "egg", t = "add"
输出: true

示例 2:

输入: s = "foo", t = "bar"
输出: false

示例 3:

输入: s = "paper", t = "title"
输出: true

说明:
你可以假设 s 和 t 具有相同的长度。

思路:
1.使用哈希表map和一个boolean数组结合
2.当s中的某一字符不在map中时，检查boolean数组里t的该位置的字符是否已经存在，避免出现s=ab，t=aa的情况
  当s中的某一字符在map中时，如果不是对应的t该位置上的字符，则返回false，否则就将s的字符加到map中，boolean数组该位置上置true
3.使用Character[]数组与HashMap<Character,Character>都差不多，但前者更方便。
4.数组里[]内可以写字符？？
(1)
public class Solution {

    public boolean isIsomorphic(String s, String t) {
        int slen = s.length();
        int tlen = t.length();
        if (slen != tlen) {
            return false;
        }
        Character[] map = new Character[256];
        boolean[] set = new boolean[256];
        for (int i = 0; i < slen; i++) {
            char key = s.charAt(i);
            char value = t.charAt(i);
            if (map[key] == null) {
                // 建立映射关系
                if (set[value]) {
                    return false;
                }
                map[key] = value;
                set[value] = true;
            } else {
                if (map[key] != value) {
                    return false;
                }
            }
        }
        return true;
    }
}

(2)
class Solution {
    public boolean isIsomorphic(String s, String t) {
        int n = s.length();
        HashMap<Character, Character> map = new HashMap<>();
        boolean []set=new boolean[256];
        for (int i = 0; i < n; i++) {
            char c1 = s.charAt(i);
            char c2 = t.charAt(i);
            if (map.containsKey(c1)) {
                if (map.get(c1) != c2) {
                 return false;
                }
            } else {
                if(set[c2]) return false;
                map.put(c1, c2);
                set[c2]=true;
            }
    }
        return true;
    }
}
